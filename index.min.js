(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.Resizing = factory());
}(this, (function () { 'use strict';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var Resizing = function () {
    function Resizing(el) {
        var _this = this;

        classCallCheck(this, Resizing);

        this.el = el;
        this.size = 10000;
        this.box = document.createElement('div');
        this.expansion = document.createElement('div');
        this.shrink = document.createElement('div');
        this.box.setAttribute('class', 'resizing-detector');
        this.box.setAttribute('style', 'z-index: -999; visibility: hidden; width: 100%; height: 100%; margin: 0; padding: 0;');
        this.shrink.setAttribute('style', 'position: absolute; left: 0px; top: 0px; width: 100%; height: 100%; overflow: scroll;background: rgba(0,0,0,0.1)');
        this.expansion.setAttribute('style', 'position: absolute; left: 0px; top: 0px; width: 100%; height: 100%; overflow: scroll;background: rgba(0,0,0,0.1)');
        this.expansion.innerHTML = '<div style="width: ' + this.size + 'px; height: ' + this.size + 'px"></div>';
        this.shrink.innerHTML = '<div style="width: ' + 222 + '%; height: ' + 222 + '%"></div>';
        this.box.appendChild(this.expansion);
        this.box.appendChild(this.shrink);
        this.el.appendChild(this.box);
        this.reset();
        this.expansion.addEventListener('scroll', function (e) {
            _this.scrollTo(_this.shrink, _this.size, _this.size);
        });
        this.shrink.addEventListener('scroll', function (e) {
            _this.scrollTo(_this.expansion, _this.size, _this.size);
        });
    }

    createClass(Resizing, [{
        key: 'reset',
        value: function reset() {
            this.scrollTo(this.expansion, this.size, this.size);
            this.scrollTo(this.shrink, this.size, this.size);
        }
    }, {
        key: 'scrollTo',
        value: function scrollTo(el, top, left) {
            el.scrollTop = top;
            el.scrollLeft = left;
        }
    }, {
        key: 'on',
        value: function on(cb) {
            this.expansion.addEventListener('scroll', cb);
        }
    }, {
        key: 'off',
        value: function off(cb) {
            this.expansion.removeEventListener('scroll', cb);
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.el.removeChild(this.box);
            // TODO: remove eventListener ?
            this.el = null;
            this.box = null;
            this.shrink = null;
            this.expansion = null;
        }
    }]);
    return Resizing;
}();

return Resizing;

})));
